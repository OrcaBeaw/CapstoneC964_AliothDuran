# -*- coding: utf-8 -*-
"""C964_AliothDuran.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WXWyrz3mBZqaZ3qqLsqfvqusP4NhqgGa
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install tensorflow #install tensorflow
!git clone https://github.com/OrcaBeaw/CapstoneC964_AliothDuran.git #clone git
# %cd CapstoneC964_AliothDuran #change to folder

#import necessary libraries
import tensorflow as tf
from tensorflow.keras import datasets, models, layers
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

#Load dataset

batch_size = 32
img_height = 180
img_width = 180

dataset_dir = '/content/CapstoneC964_AliothDuran'

train_dataset = tf.keras.utils.image_dataset_from_directory(
  dataset_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

validation_dataset = tf.keras.utils.image_dataset_from_directory(
  dataset_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_dataset.class_names
print(class_names)

#visualize data
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_dataset.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

#standardize the data
normalization_layer = layers.Rescaling(1./255)
normalized_ds = train_dataset.map(lambda x, y: (normalization_layer(x), y))
image_batch, labels_batch = next(iter(normalized_ds))
first_image = image_batch[0]

print(np.min(first_image), np.max(first_image))

#data augmentation
!pip install keras
from tensorflow import keras
data_augmentation = keras.Sequential(
  [
    layers.RandomFlip("horizontal",
                      input_shape=(img_height,
                                  img_width,
                                  3)),
    layers.RandomRotation(0.1),
    layers.RandomZoom(0.1),
  ]
)

#creating the model
from tensorflow.keras.models import Sequential #Import the Sequential object
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout #Import the necessary layers

num_classes = len(class_names)

model = Sequential([
  data_augmentation,
  layers.Rescaling(1./255),
  layers.Conv2D(16, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(64, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Dropout(0.5),
  layers.Flatten(),
  layers.Dense(128, activation='relu'),
  layers.Dense(num_classes)
])

#Compile the model
#In order for the table to fill out, it needs to be ran again after the everything runs once.
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.summary()

#train the model
epochs=20
history = model.fit(
  train_dataset,
  validation_data=validation_dataset,
  epochs=epochs
)

#Visualize results
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

#Model architecture diagram (Requires mouse scrolling)
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

import requests
from PIL import Image
from io import BytesIO
import numpy as np
import tensorflow as tf

# Link your image (Replace the URL)
coral_url = "https://i0.wp.com/sitn.hms.harvard.edu/wp-content/uploads/2021/05/coral-bleaching.jpeg?resize=1500%2C768&ssl=1"

# Download the image using requests
response = requests.get(coral_url)

# Check if the response is successful
if response.status_code == 200:
    print("Content type:", response.headers['Content-Type'])
    try:
        img = Image.open(BytesIO(response.content))
        img = img.resize((img_width, img_height))
        img_array = tf.keras.utils.img_to_array(img)
        img_array = tf.expand_dims(img_array, 0)

        # Make predictions
        predictions = model.predict(img_array)
        score = tf.nn.softmax(predictions[0])

        #print image
        print("Image URL: ",coral_url)
        plt.imshow(img)
        plt.axis("off")
        plt.show()

        # Print the results
        print(
            "This image most likely belongs to {} with a {:.2f} percent confidence."
            .format(class_names[np.argmax(score)], 100 * np.max(score))
        )
    except Exception as e:
        print("Error processing image:", e)
else:
    print("Failed to retrieve image:", response.status_code)